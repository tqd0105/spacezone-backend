const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

// üìå ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
exports.registerUser = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });

    // M√£ h√≥a m·∫≠t kh·∫©u
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // T·∫°o user m·ªõi
    user = new User({ name, email, password: hashedPassword });
    await user.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!", user });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

// üìå ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
exports.loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    // T√¨m user theo email
    let user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

    // T·∫°o token JWT
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" });

    res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token, user });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};

// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
exports.getUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    if (!user) return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    res.json(user);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng tin user:", error);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
};
