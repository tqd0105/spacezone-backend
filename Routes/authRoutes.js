const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const router = express.Router();
const authMiddleware = require("../middlewares/authMiddleware");

// üìå Ki·ªÉm tra API ho·∫°t ƒë·ªông
router.get("/", (req, res) => {
  res.send("‚úÖ Auth API is working!");
});

router.get("/register", (req, res) => {
  res.send("‚úÖ API /auth/register ƒëang ho·∫°t ƒë·ªông (ch·ªâ h·ªó tr·ª£ POST)");
});

// üìå ƒêƒÉng k√Ω
router.post("/register", async (req, res) => {
  try {
    const { name, email, password, confirmPassword } = req.body;

    if (!name || !email || !password || !confirmPassword) {
      return res.status(400).json({ error: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    if (password !== confirmPassword) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!" });
    }

    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      username: email.split("@")[0]
    });

    const token = jwt.sign(
      { id: newUser._id },
      process.env.JWT_SECRET || "your_jwt_secret",
      { expiresIn: "12h" }
    );
    
    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      token,
      user: {
        id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        username: newUser.username,
        avatar: newUser.avatar || null
      }
    });    

    await newUser.save();

  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

// Login
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: "Sai m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign(
      { id: user._id },
      process.env.JWT_SECRET || "your_jwt_secret",
      { expiresIn: "12h" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        username: user.username,
        avatar: user.avatar
      }
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

// üìå L·∫•y th√¥ng tin user
router.get("/me", authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    if (!user) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y user" });
    }
    res.json(user);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng tin user:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});



module.exports = router;
