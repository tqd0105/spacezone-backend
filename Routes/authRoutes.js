const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const router = express.Router();
const { verifyToken, sanitizeSensitiveData } = require("../middlewares/authMiddleware");

// Cache ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin ƒëƒÉng nh·∫≠p g·∫ßn ƒë√¢y
const loginCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 ph√∫t

// üìå Ki·ªÉm tra API ho·∫°t ƒë·ªông
router.get("/", (req, res) => {
  res.send("‚úÖ Auth API is working!");
});

router.get("/register", (req, res) => {
  res.send("‚úÖ API /auth/register ƒëang ho·∫°t ƒë·ªông (ch·ªâ h·ªó tr·ª£ POST)");
});

// üìå ƒêƒÉng k√Ω
router.post("/register", sanitizeSensitiveData, async (req, res) => {
  try {
    const { name, email, password, confirmPassword } = req.body;

    if (!name || !email || !password || !confirmPassword) {
      return res.status(400).json({ error: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    if (password !== confirmPassword) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!" });
    }

    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      username: email.split("@")[0]
    });

    await newUser.save();

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      user: { id: newUser._id, name: newUser.name, email: newUser.email }
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

// Login
router.post("/login", sanitizeSensitiveData, async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // Ki·ªÉm tra cache tr∆∞·ªõc
    const cacheKey = `${email}:${password}`;
    const cachedData = loginCache.get(cacheKey);
    if (cachedData && Date.now() - cachedData.timestamp < CACHE_TTL) {
      return res.json(cachedData.data);
    }

    // T√¨m user v√† ki·ªÉm tra m·∫≠t kh·∫©u trong m·ªôt query
    const user = await User.findOne({ email }).select('+password');
    if (!user) {
      return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: "Sai m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign(
      { id: user._id },
      process.env.JWT_SECRET || "your_jwt_secret",
      { expiresIn: "12h" }
    );

    const responseData = {
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        username: user.username,
        avatar: user.avatar
      }
    };

    // L∆∞u v√†o cache
    loginCache.set(cacheKey, {
      data: responseData,
      timestamp: Date.now()
    });

    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p b·∫•t ƒë·ªìng b·ªô
    user.loginHistory.push({
      id: req.body.ip || req.ip,
      userAgent: req.body.userAgent || req.headers['user-agent'],
      time: new Date()
    });
    user.save().catch(err => console.error("L·ªói c·∫≠p nh·∫≠t l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p:", err));

    res.json(responseData);
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

// üìå L·∫•y th√¥ng tin user
router.get("/me", verifyToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    if (!user) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y user" });
    }
    res.json(user);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng tin user:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
});

module.exports = router;
